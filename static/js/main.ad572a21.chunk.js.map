{"version":3,"sources":["components/AcronymComponent/AcronymComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AcronymComponent","pathname","useLocation","term","slice","words","Random","console","log","react_default","a","createElement","style","margin","meaning","split","i","length","word","j","element","includes","every","el","join","getAcronym","App","_useState","useState","_useState2","Object","slicedToArray","location","display","flexDirection","width","react_router_dom","react_router","path","component","contributors","map","_ref","name","url","delimiter","key","target","href","renderContributors","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAKO,SAASA,IAAmB,IACzBC,EAAaC,cAAbD,SACFE,EAAOF,EAASG,MAAM,GACtBC,EAAQC,IAAO,KAErB,OADAC,QAAQC,IAAIH,GAEVI,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,SACpBJ,EAAAC,EAAAC,cAAA,UAAKV,EAASG,MAAM,GAApB,WACAK,EAAAC,EAAAC,cAAA,UAIJ,SAAoBR,EAAcE,GAEhC,IADA,IAAMS,EAAUX,EAAKY,MAAM,IAClBC,EAAI,EAAGA,EAAIX,EAAMY,OAAQD,IAAK,CAErC,IADA,IAAME,EAAOb,EAAMW,GACVG,EAAI,EAAGA,EAAIL,EAAQG,OAAQE,IAAK,CACvC,IAAMC,EAAUN,EAAQK,GACD,IAAnBC,EAAQH,QAAgBC,EAAK,KAAOE,GAAYN,EAAQO,SAASH,KACnEJ,EAAQK,GAAKD,GAGjB,GAAIJ,EAAQQ,MAAM,SAACC,GAAD,OAAQA,EAAGN,OAAS,IACpC,MAGJ,OAAOH,EAAQU,KAAK,KAlBbC,CAAWtB,EAAME,iBC2CbqB,MA3Cf,WAAe,IAAAC,EACiBC,mBAAiB,IADlCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAUb,OAVaE,EAAA,GAAAA,EAAA,GAQbtB,QAAQC,IAAIwB,UAGVvB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACqB,QAAS,OAAQC,cAAe,SAAUrB,OAAQ,OAAQsB,MAAO,SAC5E1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACI3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KAEE5B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWvC,MAGtCS,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,OAAQ,SAIzB,SAA4B2B,GAC1B,OACE/B,EAAAC,EAAAC,cAAA,qCAEG6B,EAAaC,IAAI,SAAAC,EAAgB1B,GAAM,IAAnB2B,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,IACnBC,EACE,IAAN7B,EAAU,IAAMA,EAAIwB,EAAavB,OAAS,EAAI,KAAO,SACvD,OACER,EAAAC,EAAAC,cAAA,QAAMmC,IAAKH,GACRE,EACDpC,EAAAC,EAAAC,cAAA,KAAGoC,OAAO,SAASC,KAAMJ,GACtBD,OAfoBM,CAfd,CACnB,CAAEN,KAAM,OAAQC,IAAK,yCACrB,CAAED,KAAM,MAAOC,IAAK,mCCNJM,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ad572a21.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useLocation } from \"react-router-dom\";\nimport Random from \"random-words\";\n\nexport function AcronymComponent() {\n  const { pathname } = useLocation();\n  const term = pathname.slice(1);\n  const words = Random(1000);\n  console.log(words);\n  return (\n    <div style={{ margin: \"auto\" }}>\n      <h3>{pathname.slice(1)} means:</h3>\n      <h1>{getAcronym(term, words)}</h1>\n    </div>\n  );\n\n  function getAcronym(term: string, words: string[]) {\n    const meaning = term.split(\"\");\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      for (let j = 0; j < meaning.length; j++) {\n        const element = meaning[j];\n        if (element.length === 1 && word[0] === element && !meaning.includes(word)) {\n          meaning[j] = word;\n        }\n      }\n      if (meaning.every((el) => el.length > 1)) {\n        break;\n      }\n    }\n    return meaning.join(\" \");\n  }\n}\n","import React, { useState } from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport {AcronymComponent} from './components';\n\nimport \"./App.css\";\nimport \"./mvp.css\";\n\nfunction App() {\n  const [acronym, setAcronym] = useState<string>(\"\");\n\n  const contributors = [\n    { name: \"Nick\", url: \"https://www.github.com/nicklewanowicz\" },\n    { name: \"50w\", url: \"https://www.github.com/50w\" },\n  ];\n\n  console.log(location);\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', margin: 'auto', width: '100%'}}>\n      <Router>\n          <Switch>\n            {/* Using the `component` prop */}\n            <Route path=\"/:slug\" component={AcronymComponent} />\n          </Switch>\n      </Router>\n      <div style={{margin: 'auto'}}>{renderContributors(contributors)}</div>\n    </div>\n  );\n\n  function renderContributors(contributors: { name: string; url: string }[]) {\n    return (\n      <p>\n        Made with ❤️ by\n        {contributors.map(({ name, url }, i) => {\n          const delimiter =\n            i === 0 ? \" \" : i < contributors.length - 1 ? \", \" : \", and \";\n          return (\n            <span key={name}>\n              {delimiter}\n              <a target=\"_blank\" href={url}>\n                {name}\n              </a>\n            </span>\n          );\n        })}\n      </p>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}